import pandas as pd
import json as js
import re
import os,sys,string,re,glob
import subprocess
import tempfile


def generate_prolog(testcase, id_num, project):
    joern_home = ""
    tmp_dir = tempfile.TemporaryDirectory()
    short_filename = str(id_num)+".cpp"
    with open(tmp_dir.name + "/" + short_filename, 'w') as f:
        f.write(testcase)
    print(short_filename)
    subprocess.check_call("cd " + joern_home + "&& ./joern-parse " + tmp_dir.name + " --out " + tmp_dir.name + "/cpg.bin.zip")

    tree = subprocess.check_output(
        "cd joern_home && ./joern --script graph-for-funcs.sc --params cpgFile="+tmp_dir.name +"/cpg.bin.zip",
        shell=True,
        universal_newlines=True,
    )
    subprocess.check_call("cd " + joern_home + "&& ./joern-export " + tmp_dir.name +"/cpg.bin.zip" + " --repr pdg --out " + os.getcwd + "/pdg/" + project + "/" + str(id_num))
    pos = tree.find("% FEATURE")
    print(pos)
    if pos >0:
        tree = tree[pos:]
    tmp_dir.cleanup()
    return tree


#Reveal Dataset
Rule1 = "\/\*[\s\S]*\*\/"
Rule2 = "\/\/.*"
c1=re.compile(Rule1)
data_1 = open("./data/vulnerables.json")
all_functions_1 = js.load(data_1)
data_1_storage = []
for function_1 in all_functions_1:
    code = function_1["code"]
    code = re.sub(Rule1,"",re.sub(Rule2,"",code))
    data_line = [1, code, ""]
    data_1_storage.append(data_line)
data_1_ = open("./data/non-vulnerables.json")
all_functions_1_ = js.load(data_1_)
for function_1_ in all_functions_1_:
    code = function_1_["code"]
    code = re.sub(Rule1,"",re.sub(Rule2,"",code))
    data_line = [0, code, ""]
    data_1_storage.append(data_line)

#Fan et al. dataset
all_functions_2 =pd.read_csv("./data/all_functions.csv")
data_2_storage = []
for i, j in all_functions_2.iterrows(): 
    code_1 = j[2]
    code_1 = re.sub(Rule1,"",re.sub(Rule2,"",code_1))
    code_2 = j[4]
    code_2 = re.sub(Rule1,"",re.sub(Rule2,"",code_2))
    data_2_storage.append([int(j[1]),code_1,code_2])
    
#FFMpeg+Qemu dataset
data_3 = open("./data/function.json")
all_functions_3 = js.load(data_3)
data_3_storage = []
for function_3 in all_functions_3:
    code = function_3["func"]
    code = re.sub(Rule1,"",re.sub(Rule2,"",code))
    label = function_3["target"]
    data_line = [label, code, ""]
    data_3_storage.append(data_line)

for i in range(len(data_1_storage)):
    tree = generate_prolog(data_1_storage[i][1], i, "Reveal")
    data_1_storage[i].append(tree)
    print(data_1_storage[0])
for i in range(len(data_2_storage)):
    tree = generate_prolog(data_2_storage[i][1], i, "Fan")
    data_2_storage[i].append(tree)
for i in range(len(data_3_storage)):
    tree = generate_prolog(data_3_storage[i][1], i, "FFMpeg")
    data_3_storage[i].append(tree)
    
    
